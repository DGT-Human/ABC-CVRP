import numpy as np
from utils.solution_handler import get_problem, write_solution
from utils.validate import compute_solution, check_solution, check_capacity_criteria

class GreedyCVRP():

    def greedy_cvrp(problem):
        depot = problem['depot_i']
        demands = np.array(problem['demands'])
        capacity = problem['capacity']
        dists = problem['dists']

        num_vehicles = problem['n_trucks']
        vehicles = [[] for _ in range(num_vehicles)]
        vehicle_loads = [0] * num_vehicles
        vehicle_positions = [depot] * num_vehicles

        unvisited = set(range(len(demands)))
        unvisited.remove(depot)

        vehicle_index = 0

        while unvisited:
            best_customer = None
            best_cost = float('inf')

            for customer in unvisited:
                cost = dists[vehicle_positions[vehicle_index]][customer]  # 1Ô∏è‚É£ T√≠nh chi ph√≠ di chuy·ªÉn ƒë·∫øn kh√°ch h√†ng n√†y
                demand_ratio = demands[customer] / capacity  # 2Ô∏è‚É£ X√°c ƒë·ªãnh t·ª∑ l·ªá t·∫£i tr·ªçng so v·ªõi kh·∫£ nƒÉng ch·ªü c·ªßa xe
                score = cost * (1 - demand_ratio)  # 3Ô∏è‚É£ K·∫øt h·ª£p c·∫£ chi ph√≠ l·∫´n t·∫£i tr·ªçng v√†o h√†m ƒë√°nh gi√°

                if vehicle_loads[vehicle_index] + demands[customer] <= capacity and score < best_cost:
                    best_customer = customer
                    best_cost = score

            if best_customer is not None:
                vehicles[vehicle_index].append(best_customer)
                vehicle_loads[vehicle_index] += demands[best_customer]
                vehicle_positions[vehicle_index] = best_customer
                unvisited.remove(best_customer)
            else:
                # Xe ƒë√£ ƒë·∫ßy, quay v·ªÅ depot
                vehicles[vehicle_index].append(depot)
                vehicle_positions[vehicle_index] = depot
                # N·∫øu c√≤n xe th√¨ chuy·ªÉn sang xe ti·∫øp theo
                if vehicle_index + 1 < num_vehicles:
                    vehicle_index += 1
                else:
                    print(
                        f"Xe {vehicle_index}: ƒê√£ ƒëi qua {vehicles[vehicle_index]} - T·∫£i tr·ªçng {vehicle_loads[vehicle_index]}")
                    print(f"C√≤n l·∫°i {len(unvisited)} kh√°ch ch∆∞a ƒë∆∞·ª£c giao")
                    print(f"Kh√°ch h√†ng ch∆∞a ƒë∆∞·ª£c giao: {unvisited}")
                    print(f"Nhu c·∫ßu kh√°ch h√†ng ch∆∞a giao: {[demands[c] for c in unvisited]}")
                    print(f"‚ö† Kh√¥ng th·ªÉ ph·ª•c v·ª• t·∫•t c·∫£ kh√°ch h√†ng! C√≤n {len(unvisited)} kh√°ch ch∆∞a ƒë∆∞·ª£c giao.")
                    break

        # ƒê·∫£m b·∫£o xe quay v·ªÅ depot
        for route in vehicles:
            if route and route[-1] != depot:
                route.append(depot)

        # ‚úÖ Chuy·ªÉn tuy·∫øn ƒë∆∞·ªùng th√†nh danh s√°ch tuy·∫øn
        solution = [depot] + [node for route in vehicles for node in route]

        # ‚úÖ Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa l·ªùi gi·∫£i tr∆∞·ªõc khi tr·∫£ v·ªÅ
        if not check_solution(problem, solution):
            print("üö® L·ªùi gi·∫£i kh√¥ng h·ª£p l·ªá! Th·ª≠ debug l·∫°i...")
            return solution  # V·∫´n tr·∫£ v·ªÅ danh s√°ch tuy·∫øn nh∆∞ng c√≥ c·∫£nh b√°o

        # ‚úÖ Ki·ªÉm tra t·ªïng t·∫£i tr·ªçng t·ª´ng xe
        if not check_capacity_criteria(problem, solution):
            print("üö® M·ªôt s·ªë tuy·∫øn ƒë∆∞·ªùng v∆∞·ª£t qu√° t·∫£i tr·ªçng!")
            return solution  # Tr·∫£ v·ªÅ danh s√°ch tuy·∫øn nh∆∞ng c√≥ c·∫£nh b√°o

        return solution  # ‚úÖ Gi·ªØ c√°ch return nh∆∞ c≈©

